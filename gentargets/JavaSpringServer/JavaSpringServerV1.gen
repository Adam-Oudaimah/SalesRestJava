---
name: "JavaSpringServerV1"
genTemplateId: "com.reprezen.genflow.openapi.generator.SpringCodegen"
relativeOutputDir: temp
prerequisites: null
primarySource: 
  path: "../../SalesRestSpec/spec-v1.yaml"
namedSources: null 
# The parameters object contains variables that are processed directly by the GenTemplate.
parameters: 
  # Sort method arguments to place required parameters before optional parameters.
  sortParamsByRequiredFlag: null
  
  # Whether to ensure parameter names are unique in an operation (rename parameters that are not).
  ensureUniqueParams: null
  
  # boolean, toggles whether unicode identifiers are allowed in names or not, default is false
  allowUnicodeIdentifiers: null
  
  # Add form or body parameters to the beginning of the parameter list.
  prependFormOrBodyParameters: null
  
  # package for generated models
  modelPackage: "colourmyplate.data.rest.server.v1.model"
  
  # package for generated api classes
  apiPackage: "colourmyplate.data.rest.server.v1.api"
  
  # root package for generated code
  invokerPackage: "colourmyplate.data.rest.server.v1.invoker"
  
  # groupId in generated pom.xml
  groupId: null
  
  # artifactId in generated pom.xml
  artifactId: null
  
  # artifact version in generated pom.xml
  artifactVersion: null
  
  # artifact URL in generated pom.xml
  artifactUrl: null
  
  # artifact description in generated pom.xml
  artifactDescription: null
  
  # SCM connection in generated pom.xml
  scmConnection: null
  
  # SCM developer connection in generated pom.xml
  scmDeveloperConnection: null
  
  # SCM URL in generated pom.xml
  scmUrl: null
  
  # developer name in generated pom.xml
  developerName: null
  
  # developer email in generated pom.xml
  developerEmail: null
  
  # developer organization in generated pom.xml
  developerOrganization: null
  
  # developer organization URL in generated pom.xml
  developerOrganizationUrl: null
  
  # The name of the license
  licenseName: null
  
  # The URL of the license
  licenseUrl: null
  
  # source folder for generated code
  sourceFolder: 'server'
  
  # prefix for generated code members and local variables
  localVariablePrefix: null
  
  # boolean - toggle "implements Serializable" for generated models
  serializableModel: true
  
  # Treat BigDecimal values as Strings to avoid precision loss.
  bigDecimalAsString: null
  
  # whether to use fully qualified name for classes under java.util. This option only works for Java API client
  fullJavaUtil: null
  
  # hides the timestamp when files were generated
  hideGenerationTimestamp: null
  
  # whether to include support for application/xml content type and include XML annotations in the model (works with libraries that provide support for JSON and XML)
  withXml: null
  
  # Option. Date library to use
  dateLibrary: 'java8'
  
  # Option. Use Java8 classes instead of third party equivalents
  java8: true
  
  # Disable HTML escaping of JSON strings when using gson (needed to avoid problems with byte[] fields)
  disableHtmlEscaping: true
  
  # Set booleanGetterPrefix (default value 'get')
  booleanGetterPrefix: 'is'
  
  # parent groupId in generated pom N.B. parentGroupId, parentArtifactId and parentVersion must all be specified for any of them to take effect
  parentGroupId: null
  
  # parent artifactId in generated pom N.B. parentGroupId, parentArtifactId and parentVersion must all be specified for any of them to take effect
  parentArtifactId: null
  
  # parent version in generated pom N.B. parentGroupId, parentArtifactId and parentVersion must all be specified for any of them to take effect
  parentVersion: null
  
  # server title name or client service name
  title: null
  
  # configuration package for generated code
  configPackage: null
  
  # base package (invokerPackage) for generated code
  basePackage: null
  
  # Whether to generate only API interface stubs without the server files.
  interfaceOnly: true
  
  # Whether to generate the server files using the delegate pattern
  delegatePattern: null
  
  # Whether to select only one produces/consumes content-type by operation.
  singleContentTypes: null
  
  # use async Callable controllers
  async: null
  
  # wrap responses in Mono/Flux Reactor types (spring-boot only)
  reactive: null
  
  # wrap the responses in given type (Future,Callable,CompletableFuture,ListenableFuture,DeferredResult,HystrixCommand,RxObservable,RxSingle or fully qualified type)
  responseWrapper: null
  
  # Generates the virtual service. For more details refer - https://github.com/elan-venture/virtualan/wiki
  virtualService: null
  
  # use tags for creating interface and controller classnames
  useTags: null
  
  # Use BeanValidation API annotations
  useBeanValidation: null
  
  # Use Bean Validation Impl. to perform BeanValidation
  performBeanValidation: null
  
  # Use of @ApiImplicitParams for headers.
  implicitHeaders: null
  
  # Generate Spring OpenAPI Docket configuration class.
  swaggerDocketConfig: null
  
  # Generate the API from the OAI spec at server compile time (API first approach)
  apiFirst: null
  
  # Use Optional container for optional parameters
  useOptional: null
  
  # Use Spring HATEOAS library to allow adding HATEOAS links
  hateoas: null
  
  # Generated server returns 2xx code
  returnSuccessCode: null
  
  # library template (sub-template) to use
  library: 'spring-boot'
  
  # Contents of OpenAPI Generator configuration file.
  # This is the file that would be passed with the --config option on the OpenAPI Generator
  # command line. The JSON contents of that file should be the value of this parameter.
  # This parameter need not be used. If it is absent, all string-valued parameters are collected into
  # a map that is then passed to the OpenAPI Generator module. If a map is provided here, then
  # string-valued parameters are still copied in, overriding like-named values appearing in the map.
  openApiCodegenConfig: null
  
  # System properties to set, as in the -D option of OpenAPI Generator command line.
  # Each property should be a JSON object with a name/value pair for each property.
  # Example: for '-Dmodels -Dapis=User,Pets' use the following:
  # value:
  #   models: ''
  #   apis: Users,Pets
  openApiCodegenSystemProperties: null
  
  # Specifies types that are provided by the API implementation, and so should not be generated.
  # Type names should be unqualified. The qualified name should be defined in importMappings.
  # The value is an array of type names. Example usage:
  #   languageSpecificPrimitives:
  #     - Pet
  #     - User
  languageSpecificPrimitives: null
  
  # Sets mappings between general-purpose types and declared types in the generated code. Types
  # may include string, number, integer, boolean, array, object, or others defined by the generator.
  # Types should be unqualified. The qualified name should be defined in importMappings. Example usage:
  #   typeMappings:
  #     array: Set
  #     map: LinkedHashMap
  typeMappings: null
  
  # Specifies mappings between general-purpose types and their runtime types, for cases where
  # generated code may need to instantiate that type. Types may include map, array, or other
  # types as defined by the generator. Type names should be unqualified. The qualified name should
  # be defined in importMappings. Example usage:
  #   instantiationTypes:
  #     array: HashSet
  #     map: LinkedHashMap
  instantiationTypes: null
  
  # Specifies mappings between an unqualified class or interface name and the qualified name that
  # should be imported where that class is used. Example usage:
  #   importMappings:
  #     HashSet: java.util.HashSet
  #     LinkedHashMap: java.util.LinkedHashMap
  #     User: com.mycomp.User
  importMappings: null
  
  # Specifies a mapping between reserved keywords in the target language and legal, non-reserved
  # names. Where the OpenAPI document uses a reserved word as a type, property, operation, or
  # parameter name, the generator will substitute the name provided in the map. Otherwise, the
  # default underscore-prefixed _<name> will be applied. Example usage:
  #   reservedWordsMappings:
  #     switch: xswitch
  #     transient: xtransient
  reservedWordsMappings: null
