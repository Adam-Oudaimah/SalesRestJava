plugins {
    id "java-library"
    id "eclipse"
    id "maven-publish"
    id "org.ajoberstar.grgit" version "3.1.1"
	id "com.gorylenko.gradle-git-properties" version "2.0.0"
}

ext {
    scope = getScope()
}

group = "colourmyplate.data"
version = getVersion("1.0.0", scope)
sourceCompatibility = 14
targetCompatibility = 14

sourceSets {
    main {
        java { srcDirs = ["src/server", "src/client", "src/validation"] }
        resources { srcDir "src/resources" }
    }
}

eclipse {
    project {
        natures = ["com.modelsolv.reprezen.zenNature", "org.eclipse.xtext.ui.shared.xtextNature", "org.eclipse.m2e.core.maven2Nature"]
        buildCommand "com.modelsolv.reprezen.ui.RepreZenBuilder" // Might not be found, but works anyway
        buildCommand "org.eclipse.xtext.ui.shared.xtextBuilder"
        buildCommand "org.eclipse.m2e.core.maven2Builder"
    }
}

repositories {
    mavenCentral()
    jcenter()
    gradlePluginPortal()
}

configurations {
	implementation.exclude module: "spring-boot-starter-tomcat"
    implementation.exclude module: "junit"
}

dependencies {
    // for OpenAPI generated Clients
    api "com.squareup.okhttp3:okhttp:3.14.2"
    // For OpenAPI generated Sources
    // Can not be deprecated since they are required for the generated code
    implementation "org.springframework.boot:spring-boot-starter-web:2.3.0.RELEASE"
    implementation "org.springframework.boot:spring-boot-starter-undertow:2.3.0.RELEASE"
    
    // For OpenApi specification
    implementation "io.swagger:swagger-core:1.5.22"
    implementation "com.squareup.okhttp3:logging-interceptor:3.14.2"
    implementation "com.google.code.gson:gson:2.8.5"
    implementation "io.gsonfire:gson-fire:1.8.3"
    implementation "org.openapitools:jackson-databind-nullable:0.2.0"
}

task sourcesJar(type: Jar) {
    archiveClassifier = "sources"
    from sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}

// Limit data written to git.properties, list all desired properties seperately
gitProperties {
	keys = [
		"git.branch", 
		"git.build.time",
		"git.build.version",
		"git.closest.tag.commit.count",
		"git.closest.tag.name",
		"git.commit.id",
		"git.commit.id.abbrev",
		"git.commit.id.describe",
		"git.commit.message.full",
		"git.commit.message.short",
		"git.commit.time",
		"git.dirty",
		"git.tags",
		"git.total.commit.count"
	]
}

task genAppInfo {
    def props = new Properties()
    props.setProperty("info.app.name", "$project.name")
    props.setProperty("info.app.version", "$project.version")
    props.setProperty("info.app.group", "$project.group")
    
    def resDir = new File("$projectDir/src/resources")
	if (! resDir.exists()) {
		mkdir resDir
	}
    def propertyFile = new File("$projectDir/src/resources/application.properties")
    propertyFile.createNewFile();
    props.store(propertyFile.newWriter(), null)
}
compileJava.dependsOn genAppInfo


task buildSources(dependsOn: [ ":JavaClient:execGenTarget", ":JavaSpringServer:execGenTarget", ":HTMLDocStatic:execGenTarget"])

task buildDocs(dependsOn: [ ":HTMLDocStatic:execGenTarget" ])


String getConfigurationProperty(String envVar, String sysProp, String defaultValue) {
    def result = System.getenv(envVar) ?: project.findProperty(sysProp)
    result ?: defaultValue
}


import org.ajoberstar.grgit.Grgit
String getScope() {
    String branchName = null
    
    Map<String, String> env = System.getenv()
    for (String name in [ "GIT_LOCAL_BRANCH", "GIT_BRANCH", "BRANCH_NAME" ]) {
        if (env.containsKey(name)) {
            branchName = env[name]
            break
        }
    }
    
    if (!branchName) { // Could not detect from env variables, use branch from repo
        try {
            branchName = Grgit.open(dir: project.file(".")).branch.current().name
        } catch (Exception e) {}
    }

    // Because we only have access to snapshots repository for now.
    // TODO: Have to be fixed accrording to the selected branch
    return "test"
}

String getVersion(String version, String scope) {
	String result = version 
	if (scope != "prod")
		result = String.format("%s-%s", version, (scope == "test") ? "SNAPSHOT" : new Date().format("yyyyMMdd.HHmmss"))
	return result
}
