/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.0.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package colourmyplate.data.rest.server.v1.api;

import colourmyplate.data.rest.server.v1.model.ProductDAO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-10-23T12:19:40.042692600+03:00[Asia/Damascus]")

@Validated
@Api(value = "products", description = "the products API")
public interface ProductsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Store the new product.", nickname = "createProduct", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The new product successfully stored."),
        @ApiResponse(code = 500, message = "Internal server error.") })
    @RequestMapping(value = "/products/create",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> createProduct(@ApiParam(value = "The new product metadata." ,required=true )  @Valid @RequestBody ProductDAO productDAO) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get the available products in the store.", nickname = "getProducts", notes = "", response = ProductDAO.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Products successfully fetched.", response = ProductDAO.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No products available in the store."),
        @ApiResponse(code = 500, message = "Internal server error.") })
    @RequestMapping(value = "/products",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ProductDAO>> getProducts() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"quantity\" : 0,  \"price\" : 6.0274563,  \"owner_id\" : \"owner_id\",  \"name\" : \"name\",  \"description\" : \"description\",  \"id\" : \"id\",  \"creation_date\" : \"2000-01-23\",  \"category\" : \"category\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Update an exsiting product metadata.", nickname = "updateProduct", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The product metadata successfully updated."),
        @ApiResponse(code = 404, message = "Updating the product could not be completed because it could not be found."),
        @ApiResponse(code = 500, message = "Internal server error.") })
    @RequestMapping(value = "/products/{productId}/update",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateProduct(@ApiParam(value = "Numeric ID of the product to get",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "The updated product metadata." ,required=true )  @Valid @RequestBody ProductDAO productDAO) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
