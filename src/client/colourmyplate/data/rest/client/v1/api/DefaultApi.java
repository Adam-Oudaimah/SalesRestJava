/*
 * SalesService
 * This service interface is responsible for getting sales data.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package colourmyplate.data.rest.client.v1.api;

import colourmyplate.data.rest.client.v1.invoker.ApiCallback;
import colourmyplate.data.rest.client.v1.invoker.ApiClient;
import colourmyplate.data.rest.client.v1.invoker.ApiException;
import colourmyplate.data.rest.client.v1.invoker.ApiResponse;
import colourmyplate.data.rest.client.v1.invoker.Configuration;
import colourmyplate.data.rest.client.v1.invoker.Pair;
import colourmyplate.data.rest.client.v1.invoker.ProgressRequestBody;
import colourmyplate.data.rest.client.v1.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import colourmyplate.data.rest.client.v1.model.ClientDAO;
import colourmyplate.data.rest.client.v1.model.ProductDAO;
import colourmyplate.data.rest.client.v1.model.SaleDAO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createClient
     * @param clientDAO The new client metadata. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new client successfully stored. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClientCall(ClientDAO clientDAO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = clientDAO;

        // create path and map variables
        String localVarPath = "/clients/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClientValidateBeforeCall(ClientDAO clientDAO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientDAO' is set
        if (clientDAO == null) {
            throw new ApiException("Missing the required parameter 'clientDAO' when calling createClient(Async)");
        }
        

        okhttp3.Call localVarCall = createClientCall(clientDAO, _callback);
        return localVarCall;

    }

    /**
     * Store the new client.
     * 
     * @param clientDAO The new client metadata. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new client successfully stored. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public void createClient(ClientDAO clientDAO) throws ApiException {
        createClientWithHttpInfo(clientDAO);
    }

    /**
     * Store the new client.
     * 
     * @param clientDAO The new client metadata. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new client successfully stored. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createClientWithHttpInfo(ClientDAO clientDAO) throws ApiException {
        okhttp3.Call localVarCall = createClientValidateBeforeCall(clientDAO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Store the new client. (asynchronously)
     * 
     * @param clientDAO The new client metadata. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new client successfully stored. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClientAsync(ClientDAO clientDAO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClientValidateBeforeCall(clientDAO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProduct
     * @param productDAO The new product metadata. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new product successfully stored. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductCall(ProductDAO productDAO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productDAO;

        // create path and map variables
        String localVarPath = "/products/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductValidateBeforeCall(ProductDAO productDAO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productDAO' is set
        if (productDAO == null) {
            throw new ApiException("Missing the required parameter 'productDAO' when calling createProduct(Async)");
        }
        

        okhttp3.Call localVarCall = createProductCall(productDAO, _callback);
        return localVarCall;

    }

    /**
     * Store the new product.
     * 
     * @param productDAO The new product metadata. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new product successfully stored. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public void createProduct(ProductDAO productDAO) throws ApiException {
        createProductWithHttpInfo(productDAO);
    }

    /**
     * Store the new product.
     * 
     * @param productDAO The new product metadata. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new product successfully stored. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createProductWithHttpInfo(ProductDAO productDAO) throws ApiException {
        okhttp3.Call localVarCall = createProductValidateBeforeCall(productDAO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Store the new product. (asynchronously)
     * 
     * @param productDAO The new product metadata. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new product successfully stored. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductAsync(ProductDAO productDAO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductValidateBeforeCall(productDAO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSaleOperation
     * @param saleDAO The new sale operation metadata. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new sale operation successfully stored. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Storing the new sale operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Storing the new sale operation could not be completed because some meta data (product or seller or client could not be found). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSaleOperationCall(SaleDAO saleDAO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = saleDAO;

        // create path and map variables
        String localVarPath = "/sales/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSaleOperationValidateBeforeCall(SaleDAO saleDAO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'saleDAO' is set
        if (saleDAO == null) {
            throw new ApiException("Missing the required parameter 'saleDAO' when calling createSaleOperation(Async)");
        }
        

        okhttp3.Call localVarCall = createSaleOperationCall(saleDAO, _callback);
        return localVarCall;

    }

    /**
     * Store the new sale operation.
     * 
     * @param saleDAO The new sale operation metadata. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new sale operation successfully stored. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Storing the new sale operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Storing the new sale operation could not be completed because some meta data (product or seller or client could not be found). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public void createSaleOperation(SaleDAO saleDAO) throws ApiException {
        createSaleOperationWithHttpInfo(saleDAO);
    }

    /**
     * Store the new sale operation.
     * 
     * @param saleDAO The new sale operation metadata. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new sale operation successfully stored. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Storing the new sale operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Storing the new sale operation could not be completed because some meta data (product or seller or client could not be found). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createSaleOperationWithHttpInfo(SaleDAO saleDAO) throws ApiException {
        okhttp3.Call localVarCall = createSaleOperationValidateBeforeCall(saleDAO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Store the new sale operation. (asynchronously)
     * 
     * @param saleDAO The new sale operation metadata. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new sale operation successfully stored. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Storing the new sale operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Storing the new sale operation could not be completed because some meta data (product or seller or client could not be found). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSaleOperationAsync(SaleDAO saleDAO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSaleOperationValidateBeforeCall(saleDAO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClients
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Clients successfully fetched. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No clients available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClientsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/clients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClientsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getClientsCall(_callback);
        return localVarCall;

    }

    /**
     * Get the available clients.
     * 
     * @return List&lt;ClientDAO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Clients successfully fetched. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No clients available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public List<ClientDAO> getClients() throws ApiException {
        ApiResponse<List<ClientDAO>> localVarResp = getClientsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the available clients.
     * 
     * @return ApiResponse&lt;List&lt;ClientDAO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Clients successfully fetched. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No clients available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ClientDAO>> getClientsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getClientsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ClientDAO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the available clients. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Clients successfully fetched. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No clients available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClientsAsync(final ApiCallback<List<ClientDAO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClientsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ClientDAO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProducts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Products successfully fetched. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No products available in the store. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getProductsCall(_callback);
        return localVarCall;

    }

    /**
     * Get the available products in the store.
     * 
     * @return List&lt;ProductDAO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Products successfully fetched. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No products available in the store. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductDAO> getProducts() throws ApiException {
        ApiResponse<List<ProductDAO>> localVarResp = getProductsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the available products in the store.
     * 
     * @return ApiResponse&lt;List&lt;ProductDAO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Products successfully fetched. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No products available in the store. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductDAO>> getProductsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProductsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ProductDAO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the available products in the store. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Products successfully fetched. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No products available in the store. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsAsync(final ApiCallback<List<ProductDAO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ProductDAO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSalesOperations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales operations successfully fetched. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No sales operations available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSalesOperationsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/sales";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSalesOperationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getSalesOperationsCall(_callback);
        return localVarCall;

    }

    /**
     * Get the available sales operations.
     * 
     * @return List&lt;SaleDAO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales operations successfully fetched. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No sales operations available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public List<SaleDAO> getSalesOperations() throws ApiException {
        ApiResponse<List<SaleDAO>> localVarResp = getSalesOperationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the available sales operations.
     * 
     * @return ApiResponse&lt;List&lt;SaleDAO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales operations successfully fetched. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No sales operations available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SaleDAO>> getSalesOperationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSalesOperationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<SaleDAO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the available sales operations. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales operations successfully fetched. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No sales operations available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSalesOperationsAsync(final ApiCallback<List<SaleDAO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSalesOperationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<SaleDAO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateClient
     * @param clientDAO The updated client metadata. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The client metadata successfully updated. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientCall(ClientDAO clientDAO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = clientDAO;

        // create path and map variables
        String localVarPath = "/clients/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClientValidateBeforeCall(ClientDAO clientDAO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientDAO' is set
        if (clientDAO == null) {
            throw new ApiException("Missing the required parameter 'clientDAO' when calling updateClient(Async)");
        }
        

        okhttp3.Call localVarCall = updateClientCall(clientDAO, _callback);
        return localVarCall;

    }

    /**
     * Update an exsiting client metadata.
     * 
     * @param clientDAO The updated client metadata. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The client metadata successfully updated. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public void updateClient(ClientDAO clientDAO) throws ApiException {
        updateClientWithHttpInfo(clientDAO);
    }

    /**
     * Update an exsiting client metadata.
     * 
     * @param clientDAO The updated client metadata. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The client metadata successfully updated. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateClientWithHttpInfo(ClientDAO clientDAO) throws ApiException {
        okhttp3.Call localVarCall = updateClientValidateBeforeCall(clientDAO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an exsiting client metadata. (asynchronously)
     * 
     * @param clientDAO The updated client metadata. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The client metadata successfully updated. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientAsync(ClientDAO clientDAO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClientValidateBeforeCall(clientDAO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProduct
     * @param productDAO The updated product metadata. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The product metadata successfully updated. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductCall(ProductDAO productDAO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productDAO;

        // create path and map variables
        String localVarPath = "/products/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductValidateBeforeCall(ProductDAO productDAO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productDAO' is set
        if (productDAO == null) {
            throw new ApiException("Missing the required parameter 'productDAO' when calling updateProduct(Async)");
        }
        

        okhttp3.Call localVarCall = updateProductCall(productDAO, _callback);
        return localVarCall;

    }

    /**
     * Update an exsiting product metadata.
     * 
     * @param productDAO The updated product metadata. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The product metadata successfully updated. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public void updateProduct(ProductDAO productDAO) throws ApiException {
        updateProductWithHttpInfo(productDAO);
    }

    /**
     * Update an exsiting product metadata.
     * 
     * @param productDAO The updated product metadata. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The product metadata successfully updated. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateProductWithHttpInfo(ProductDAO productDAO) throws ApiException {
        okhttp3.Call localVarCall = updateProductValidateBeforeCall(productDAO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an exsiting product metadata. (asynchronously)
     * 
     * @param productDAO The updated product metadata. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The product metadata successfully updated. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductAsync(ProductDAO productDAO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductValidateBeforeCall(productDAO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSaleOperation
     * @param saleDAO The updated sale operation metadata. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The sale operation metadata successfully updated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Updating the sale operation metadata could not be completed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSaleOperationCall(SaleDAO saleDAO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = saleDAO;

        // create path and map variables
        String localVarPath = "/sales/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSaleOperationValidateBeforeCall(SaleDAO saleDAO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'saleDAO' is set
        if (saleDAO == null) {
            throw new ApiException("Missing the required parameter 'saleDAO' when calling updateSaleOperation(Async)");
        }
        

        okhttp3.Call localVarCall = updateSaleOperationCall(saleDAO, _callback);
        return localVarCall;

    }

    /**
     * Update an exsiting sale operation metadata.
     * 
     * @param saleDAO The updated sale operation metadata. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The sale operation metadata successfully updated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Updating the sale operation metadata could not be completed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public void updateSaleOperation(SaleDAO saleDAO) throws ApiException {
        updateSaleOperationWithHttpInfo(saleDAO);
    }

    /**
     * Update an exsiting sale operation metadata.
     * 
     * @param saleDAO The updated sale operation metadata. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The sale operation metadata successfully updated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Updating the sale operation metadata could not be completed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateSaleOperationWithHttpInfo(SaleDAO saleDAO) throws ApiException {
        okhttp3.Call localVarCall = updateSaleOperationValidateBeforeCall(saleDAO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an exsiting sale operation metadata. (asynchronously)
     * 
     * @param saleDAO The updated sale operation metadata. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The sale operation metadata successfully updated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Updating the sale operation metadata could not be completed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSaleOperationAsync(SaleDAO saleDAO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSaleOperationValidateBeforeCall(saleDAO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
